source(paste(sourceFilePath, 'load.R', sep = ''))
source(paste(sourceFilePath, 'funcs.R', sep = ''))
rm(sourceFilePath)
allFeatNames = colnames(allDat)
# names of columns by game or team or opponent:
oppFeatNames = allFeatNames[grep('Opponent(.+)', allFeatNames)]
teamFeatNames = gsub('Opponent(.+)', '\\1', oppFeatNames)
gameFeatNames = allFeatNames[!is.element(allFeatNames, c(oppFeatNames, teamFeatNames))]
# newData is allDat minus some columns while removedData contains the removed columns:
removedData = allDat[, gameFeatNames]
newData = allDat[, c(teamFeatNames, oppFeatNames)]
# dumping columns with only NAs:
toRemove = colnames(newData[,emptyColumnIndex(newData)]) # see funcs.R for emptyColumnIndex() info
temp = removeColumnsAndReturn(newData, removedData, toRemove)
newData = temp[[1]]
removedData = temp[[2]]
# changing from two columns with minutes and seconds for time of possession to one column with fractional minutes
TOP = round(allDat$TimeOfPosessionMinutes + allDat$TimeOfPosessionSeconds/60, 2)
toRemove = c('TimeOfPosessionMinutes',
'TimeOfPosessionSeconds',
'OpponentTimeOfPosessionMinutes',
'OpponentTimeOfPosessionSeconds',
'TimeOfPosession', 'OpponentTimeOfPosession')
temp = removeColumnsAndReturn(newData, removedData, toRemove)
newData = temp[[1]]
removedData = temp[[2]]
newData = addColumn(newData, TOP)
rm(TOP)
# # removing 3rd and 4th down conversions and attempts; keeping pct
#
# toRemove = c('ThirdDownAttempts',
#              'ThirdDownConversions',
#              'FourthDownAttempts',
#              'FourthDownConversions',
#              'OpponentThirdDownAttempts',
#              'OpponentThirdDownConversions',
#              'OpponentFourthDownAttempts',
#              'OpponentFourthDownConversions')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing red zone and goal to go conversions and attempts; leaving pct
#
# toRemove =   c('RedZoneConversions',
#                'RedZoneAttempts',
#                'OpponentRedZoneConversions',
#                'OpponentRedZoneAttempts')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
#
# toRemove = colnames(newData[grep('GoalToGo', colnames(newData))])
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing by-quarter scoring
#
# toRemove = paste('ScoreQuarter', c(1:4), sep = '')
# toRemove = c(toRemove, 'ScoreOvertime')
# toRemove = c(toRemove, paste('Opponent', toRemove, sep = ''))
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing number of touchdowns, replacing with % points from TD + extra pt
TdToScoreRatio = newData$Touchdown*7/(newData$Score+10^-10)
OppTdToScoreRatio = newData$OpponentTouchdown*7/(newData$OpponentScore+10^-10)
# toRemove = paste(c('', 'Opponent'), 'Touchdowns', sep = '')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# newData = addColumn(newData, TdToScoreRatio)
# newData = addColumn(newData, OppTdToScoreRatio)
rm(TdToScoreRatio, OppTdToScoreRatio)
# # removing number of first down by type data
#
# toRemove = paste('FirstDowns', c('ByPenalty', 'ByRushing', 'ByPassing'), sep = '')
# toRemove = c(toRemove, paste('Opponent', toRemove, sep = ''))
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing all data about extra points
#
# toRemove = colnames(newData[grep('ExtraPoint', colnames(newData))])
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# changing name of int columns for clarity
InterceptionsThrown = newData$PassingInterceptions
OpponentInterceptionsThrown = newData$OpponentPassingInterceptions
toRemove = paste(c('', 'Opponent'), 'PassingInterceptions', sep = '')
temp = removeColumnsAndReturn(newData, removedData, toRemove)
newData = temp[[1]]
removedData = temp[[2]]
newData = addColumn(newData, InterceptionsThrown)
newData = addColumn(newData, OpponentInterceptionsThrown)
rm(InterceptionsThrown, OpponentInterceptionsThrown)
# removing fumbles lost incl total num turnovers, keeping total number of fumbles; fumble recoveries are thought to be random; descriptive not predictive
toRemove = paste(c('', 'Opponent'), 'FumblesLost', sep = '')
temp = removeColumnsAndReturn(newData, removedData, toRemove)
newData = temp[[1]]
removedData = temp[[2]]
toRemove = paste(c('', 'Opponent'), 'Giveaways', sep = '')
toRemove = c(toRemove, paste(c('', 'Opponent'), 'Takeaways', sep = ''))
temp = removeColumnsAndReturn(newData, removedData, toRemove)
newData = temp[[1]]
removedData = temp[[2]]
toRemove = paste(c('', 'Opponent'), 'TurnoverDifferential', sep = '')
temp = removeColumnsAndReturn(newData, removedData, toRemove)
newData = temp[[1]]
removedData = temp[[2]]
# # removing penalty yards
#
# toRemove = paste(c('', 'Opponent'), 'PenaltyYards', sep = '')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing sack yards
#
# toRemove = paste(c('', 'Opponent'), 'TimesSackedYards', sep = '')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing safeties
#
# toRemove = paste(c('', 'Opponent'), 'Safeties', sep = '')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# removing punt yards
toRemove = paste(c('', 'Opponent'), 'PuntYards', sep = '')
temp = removeColumnsAndReturn(newData, removedData, toRemove)
newData = temp[[1]]
removedData = temp[[2]]
# # removing tackles for loss, yards
#
# toRemove = paste(c('', 'Opponent'), 'TacklesForLossDifferential', sep = '')
# toRemove = c(toRemove, paste(c('', 'Opponent'), 'TacklesForLoss', sep = ''))
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing times sacked
#
# toRemove = paste(c('', 'Opponent'), 'TimesSacked', sep = '')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
#
# toRemove = paste(c('', 'Opponent'), '', sep = 'QuarterbackSacksDifferential')
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing qb hits
#
# toRemove = paste(c('', 'Opponent'), 'QuarterbackHitsDifferential', sep = '')
# toRemove = c(toRemove, paste(c('', 'Opponent'), 'QuarterbackHits', sep = ''))
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing passing info
#
# toRemove = paste(c('', 'Opponent'), 'PassingYardsPerCompletion', sep = '')
# toRemove = c(toRemove, paste(c('', 'Opponent'), 'PassingCompletions', sep = ''))
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
# # removing touchdowns by type
#
# toRemove = paste(c('Passing', 'Rushing'), 'Touchdowns', sep = '')
# toRemove = c(toRemove, paste('Opponent', toRemove, sep = ''))
#
# temp = removeColumnsAndReturn(newData, removedData, toRemove)
# newData = temp[[1]]
# removedData = temp[[2]]
#
rm(allFeatNames, gameFeatNames, teamFeatNames, oppFeatNames, temp, toRemove)
# organization stuffs
infoNames = c('Season', 'Week', 'Team', 'Opponent', 'HomeOrAway')
infoIndex = is.element(colnames(removedData), infoNames)
gameInfo = removedData[, infoIndex]
unusedDat = removedData[, !infoIndex]
dat = newData
rm(removedData, newData, infoIndex, infoNames)
# must provide dateString:
save(gameInfo, file = paste(dataPath, 'gameInfo_', cleanDateString, '.Rout', sep = ''))
# save(allDat, file = paste(dataPath, 'allDat_', cleanDateString, '.Rout', sep = ''))
# save(unusedDat, file = paste(dataPath, 'unusedDat_', cleanDateString, '.Rout', sep = ''))
rm(unusedDat, allDat, gameInfo)
# abbreviating column names for brevity
colnames(dat) = gsub('Opponent', 'Opp', colnames(dat))
colnames(dat) = gsub('Yards', 'Yds', colnames(dat))
colnames(dat) = gsub('Offensive', 'Off', colnames(dat))
colnames(dat) = gsub('Passing', 'Pass', colnames(dat))
colnames(dat) = gsub('Rushing', 'Rush', colnames(dat))
colnames(dat) = gsub('Percentage', 'Pct', colnames(dat))
colnames(dat) = gsub('Quarterback', 'Qb', colnames(dat))
colnames(dat) = gsub('Interceptions', 'Int', colnames(dat))
colnames(dat) = gsub('Attempt', 'Att', colnames(dat))
colnames(dat) = gsub('Completion', 'Comp', colnames(dat))
colnames(dat) = gsub('Touchdowns', 'Td', colnames(dat))
colnames(dat) = gsub('Firstdowns', 'Fd', colnames(dat))
colnames(dat) = gsub('Average', 'Avg', colnames(dat))
colnames(dat) = gsub('Tackles', 'Tack', colnames(dat))
colnames(dat) = gsub('Passer', 'Qb', colnames(dat))
colnames(dat) = gsub('Per', 'P', colnames(dat))
# generating game result feature
gameResult = ifelse(dat$Score > dat$OppScore, 1,
ifelse(dat$Score == dat$OppScore, .5, 0))
dat$GameResult = gameResult
rm(gameResult)
# generating margin of victory feature
Margin = dat$Score - dat$OppScore
dat$Margin = Margin
rm(Margin)
# excluding redundant opponent columns; each team has it's own row for each game
dat = dat[, -grep('^Opp', colnames(dat))]
save(dat, file = paste(dataPath, 'cleanData_', cleanDateString, '.Rout', sep = ''))
rm(dataPath, cleanDateString)
dataPath = '~/projects/nfl/nflProject/data_objects/'
cleanDateString = 'Feb16'
load(paste(dataPath, 'cleanData_', cleanDateString, '.Rout', sep = ''))
cleanDateString = 'Feb16'
dataPath = '~/projects/nfl/nflProject/data_objects/'
load(paste(dataPath, 'cleanData_', cleanDateString, '.Rout', sep = ''))
sourceFilePath = './'
source(paste(sourceFilePath, 'funcs.R', sep = ''))
rm(cleanDateString, dataPath, sourceFilePath)
seasonHelper(allDat, gameInfo, 2:3, 5)
seasonHelper(allDat[gameInfo$Season == 2005], gameInfo, 2:3, 5)
seasonHelper(allDat[gameInfo$Season == 2005,], gameInfo, 2:3, 5)
a = seasonHelper(allDat[gameInfo$Season == 2005,], gameInfo, 2:3, 5)
warnings()
dim(a)
a[1:10, 1:10]
head(colnames(allDat))
(colnames(allDat))[1:20]
(colnames(dat))[1:20]
colnames(MM)[1:20]
colnames(MM)[1:50]
head(colnames(data))
cleanDateString = 'Feb16'
dataPath = '~/projects/nfl/nflProject/data_objects/'
sourceFilePath = './'
load(paste(dataPath, 'cleanData_', cleanDateString, '.Rout', sep = ''))
source(paste(sourceFilePath, 'funcs.R', sep = ''))
rm(cleanDateString, dataPath, sourceFilePath)
source(paste(sourceFilePath, 'funcs.R', sep = ''))
cleanDateString = 'Feb16'
dataPath = '~/projects/nfl/nflProject/data_objects/'
sourceFilePath = './'
load(paste(dataPath, 'cleanData_', cleanDateString, '.Rout', sep = ''))
source(paste(sourceFilePath, 'funcs.R', sep = ''))
source(paste(sourceFilePath, 'funcs.R', sep = ''))
source(paste(sourceFilePath, 'funcs.R', sep = ''))
ceiling(4.4)
ceiling(4.4)
reverse(1:2)
sort(1:4)
sort(4:1)
K = 0:12
weeks = 2:16
seas = 1985:2011
folds = MMFoldIndexList(pcaMM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(pcaMM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
mean(na.exclude(NA))
a = mean(na.exclude(NA))
a
a = mean(na.exclude(c(NA, 3, 2, NA, 5)))
a
mean(na.exclude(NA)) == NaN
mean(na.exclude(NA)) == 2
as.logical(mean(na.exclude(NA)))
is.na(as.logical(mean(na.exclude(NA))))
nothing = function(...){
return(...)
}
nothing(2)
nothing = function(anything){
return(anything)
}
nothing(2)
nothing(c(23, 'asdlfk'))
nothing(list(2:4, c('asdf', 'asdlfk')))
load(paste(dataPath, 'gameInfo_', cleanDateString, '.Rout', sep = ''))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
K = 0:6
weeks = 5:8
seas = 2009:2011
MM = dataToMM(dat, gameinfo, K, weeks, seas, nothing, featureOrganize, dataToFeatures, dateString)
MM = dataToMM(dat, gameInfo, K, weeks, seas, nothing, featureOrganize, dataToFeatures, dateString)
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
MM = dataToMM(dat, gameInfo, K, weeks, seas, nothing, featureOrganize, dataToFeatures, dateString)
MM = dataToMM(dat, gameInfo, K, weeks, seas, nothing, featureOrganize, dataToFeatures, 'testing')
MM[1:10, 1:30]
MM[1:10, 1:18]
MM[1:10, 1111:1118]
MM[1:10, 1511:1518]
which(is.na(MM[1,]))
MM[1:10, 760:780]
MM[161, 760:780]
1:5 == 2
dropColWithNA = function(data, hasOrAll = 'has'){
if (hasOrAll == 'has'){
hasNA = as.logical(apply(data, 2, sumNA))
out = data[, !hasNA]
} else if (hasOrAll == 'all'){
allNA = apply(data, 2,  meanNA) == 1
}
return(out)
}
a = dropColWithNA(MM, 'all')
meanNA = function(vector){
out = mean(is.na(vector))
return(out)
}
dropColWithNA = function(data, hasOrAll = 'has'){
if (hasOrAll == 'has'){
hasNA = as.logical(apply(data, 2, sumNA))
out = data[, !hasNA]
} else if (hasOrAll == 'all'){
allNA = apply(data, 2,  meanNA) == 1
}
return(out)
}
a = dropColWithNA(MM, 'all')
dropColWithNA = function(data, hasOrAll = 'has'){
if (hasOrAll == 'has'){
hasNA = as.logical(apply(data, 2, sumNA))
out = data[, !hasNA]
} else if (hasOrAll == 'all'){
allNA = apply(data, 2,  meanNA) == 1
out = data[, !allNA]
}
return(out)
}
a = dropColWithNA(MM, 'all')
which(is.na(a[1,]))
K = 4:6
weeks = 5:8
seas = 2007:2008
MM = dataToMM(dat, gameInfo, K, weeks, seas, nothing, featureOrganize, dataToFeatures, 'testing')
which(is.na(MM[1,]))
which(is.na(MM[110,]))
a = dropColWithNA(MM, 'all')
which(is.na(MM[110,]))
which(is.na(a[110,]))
seas = 2000:2001
MM = dataToMM(dat, gameInfo, K, weeks, seas, nothing, featureOrganize, dataToFeatures, 'testing')
a = dropColWithNA(MM, 'all')
which(is.na(a[110,]))
a = dropColWithNA(MM, 'all')
which(is.na(MM[110,]))
which(is.na(dat[110,]))
which(is.na(dat[1110,]))
which(is.na(dat[10110,]))
which(is.na(dat[5110,]))
which(is.na(dat[8110,]))
which(is.na(dat[7110,]))
which(is.na(dat[7510,]))
which(is.na(dat[7810,]))
which(is.na(dat[7660,]))
which(is.na(dat[7760,]))
which(is.na(dat[7790,]))
which(is.na(dat[7810,]))
which(is.na(dat[77400,]))
which(is.na(dat[7740,]))
which(is.na(dat[7720,]))
which(is.na(dat[7710,]))
which(is.na(dat[7680,]))
which(is.na(dat[7690,]))
which(is.na(dat[7695,]))
which(is.na(dat[7700,]))
dat[7695:7700, 8]
dat[7695:7700, 1:8]
gameInfo[7695:7700, ]
colnames(dat)
MM = dropColWithNA(MM, 'all')
folds = MMFoldIndexList(pcaMM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
adjForBye = T
validateWeeks = 14
validateSeas = 2005:2009
numWkFixed = T
if (numWkFixed){numWeeks = 20} else {numSeas = 4}
nLaterGames = 5 # for ex: building rule for wk 7 games and nLaterGames = 5, training data will include games in weeks 7-12 with features with max k feature = 5; nLater = all uses all games; when nLaterGames + week of validation > 16 then all later games are used
pcaPctMaxScoreToExlcude = .05
plotPCAscores = T
modelString = 'gbm'
# internal gbm parameters
numTrees = 50
minObs = 5
intDepth = 1
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
folds[[2]][[1]]
folds[[1]]
folds[[2]]
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
folds[[2]][[1]]
folds[[2]]
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGames = T, maxK = kMax)
folds[[1]][[1]]
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
folds[[1]]
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, T,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
seas = 2000:2006
MM = dataToMM(dat, gameInfo, K, weeks, seas, nothing, featureOrganize, dataToFeatures, 'testing')
MM = dropColWithNA(MM, 'all')
ptSpreadAdd = addWeekOfGameFeat(allDat$PointSpread, gameInfo, MM)
MM = cbind(MM, 'HomePtSpread' = ptSpreadAdd)
rm(ptSpreadAdd)
adjForBye = T
validateWeeks = 14
validateSeas = 2005:2009
numWkFixed = T
if (numWkFixed){numWeeks = 20} else {numSeas = 4}
nLaterGames = 5 # for ex: building rule for wk 7 games and nLaterGames = 5, training data will include games in weeks 7-12 with features with max k feature = 5; nLater = all uses all games; when nLaterGames + week of validation > 16 then all later games are used
pcaPctMaxScoreToExlcude = .05
plotPCAscores = T
modelString = 'gbm'
# internal gbm parameters
numTrees = 50
minObs = 5
intDepth = 1
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, T,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
folds[[1]]
validateWeeks = 6:8
validateSeas = 2004:2006
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, T,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
folds[[2]][[1]]
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, T,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
source(paste(sourceFilePath, 'funcs.v2.R', sep = ''))
folds = MMFoldIndexList(MM, numWeeksFixed = numWkFixed, validateWeeks, validateSeas, numSeas = numSeas, numWeeks = numWeeks, F,
numLaterGames = 17, trainWithWk17 = F, inclEarlierGamesWithAllInfo = T, maxK = max(K))
folds[[1]][[1]]
head(colnames(MM))
MM[1:5, folds[[1]][[1]]]
MM[folds[[1]][[1]], 1:5]
